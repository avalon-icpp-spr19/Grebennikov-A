#include<iostream>
#include"Header.hpp"
using namespace ext;
using namespace std;
struct Point
{
	float x;
	float y;

};
struct Circle
{
	int r;
	Point centr;
};
struct date
{
	int day;
	int month;
	int year;
};
enum Color
{
	red = 1,
	orange,
	yellow,
	green,
	blue,
	blue1,
	purple
};
struct Triangle
{
	Color color;
	int side[3];
};

int main()
{
	char colours[][32] = { "Красный" , "Оранжевый" , "Желтый" , "Зеленый" ,
		"Голубой" , "Синий" , "Фиолетовый" };
	setlocale(LC_ALL, "ru");
		/*
		Задание №1
		Создать структуру Point, содержащую два поля x, y типа float.
		Создать и проинициализировать переменную типа Point.
		Создать переменную типа Point и проинициализировать ее данными с клавиатуры.
		Вывести на экран значения x, y вышеобъявленных переменных.
		*/
		Point a = { 1.3,5.5 };
		Point a1;
		cout << "Enter x|y" << endl;
		cin >> a1.x;
		cin >> a1.y;
		cout << a1.x << "|" << a1.y << endl;
		cout << endl;
		/*
	Написать программу, которая определеяет принадлежит ли заданная точка кругу заданного радиуса.
	Координаты точки и радиус пользователь вводит с клавиатуры.
	Для хранения координат точки использовать структуру Point.
	*/
		int r;
		cout << "Введите R = ";
		cin >> r;		
		cout << "Введите x|y = " << endl;
		Point kor;
		cin >> kor.x;
		cin >> kor.y;
		abs(kor.x);
		abs(kor.y);
		if ((pow(kor.x, 2) + pow(kor.y, 2)) <= pow(r,2))
		{
			cout << "принадлежит";
		}
		else
		{
			cout << "не принадлежит.";
		}
		cout << endl;
		cout << endl;
		/*
	Написать программу, которая по двум заданным точкам - концам отрезка находит точку середины отрезка.
	Координаты точек пользователь вводит с клавиатуры.
	Для хранения координат точек использовать структуру Point.
	Рассчитанную точку середины отрезка также хранить как структуру Point.
	Вывести координаты полученной точки в консоль.
	*/
		cout << "Введите dot1(x|y):" << endl;
		Point line, line1, ser;
		cin >> line.x;
		cin >> line.y;
		cout << "Ввелите dot2(x|y):" << endl;
		cin >> line1.x;
		cin >> line1.y;
		ser.x = (line.x + line1.x) / 2;
		ser.y = (line.y + line1.y) / 2;
	
		cout << "Середина: " << "( " << ser.x << " ; " << ser.y << " )" << endl;
		cout << endl;
		/*
		Задание №2
		Создать структуру Circle, содержащую одно поле типа int - радиус и второе поле типа Point - центр окружности.
		Создать и проинициализировать переменную типа Circle.
		Создать переменную типа Circle и проинициализировать ее данными введенными с клавиатуры.
		Вывести на экран данные, сохраненные в вышеобъявленных переменных.
		Даны две переменные типа Circle.
		Написать программу, которая определяет пересекаются ли окружности,
		описанные данными переменными.
		*/
		int dlinna;
		Circle cir;
		cir.r = 6;
		cir.centr.x = 0;
		cir.centr.y = 0;
		Circle cir2;
		cout << "Enter r, x, y" << endl;
		cin >> cir2.r;
		cin >> cir2.centr.x;
		cin >> cir2.centr.y;
		cout << "R1 - " << cir.r << endl;
		cout << "center1 - " << cir.centr.x << "|" << cir.centr.y << endl;
		cout << "R2 - " << cir2.r << endl;
		cout << "center2 - " << cir2.centr.x << "|" << cir2.centr.y << endl;
		dlinna = 0.5*(pow((cir2.centr.x - cir.centr.x), 2) +
			((cir2.centr.y - cir.centr.y), 2));
		if (cir.r + cir2.r >= dlinna)
		{
			cout << "Пересекаются";
		}
		else 
		{
			cout << "Не пересекаются";
		}
		cout << endl;
		cout << endl;

	/*
	Задание №3
	Создать перечисление (enum) Color, для хранения 7 цветов радуги.
	Создать структуру Triangle, содержащее поле типа Color
	и массив для хранения трех элементов типа int (длины сторон).
	Создать и проинициализировать переменную типа Triangle корректными данными.
	Вывести на экран данные, сохраненные в вышеобъявленной переменной.
	Значение поля Color вывести в текстовом виде. (использовать конструкцию switch).
	Рассчитать и вывести на экран периметр вышеобъявленного треугольника.
	*/
		int perimeter;
		Triangle example = { {Color::red}, {1,2,8} };
		
		switch (example.color)
		{
		case 1:
			cout << "Красный,";
			break;
		case 2:
			cout << "Оранжевый,";
			break;
		case 3:
			cout << "Желтый,";
			break;
		case 4:
			cout << "Зеленый,";
	break;
		case 5:
			cout << "Голубой,";
	break;
		case 6:
			cout << "Синий,";
			break;
		case 7:
			cout << "Фиолетовый,";
			break;
	
			
		default:
			break;
		}
		cout   << " " << "Стороны: "  << example.side[0] <<
			", " << example.side[1] << ", " <<  example.side[2]  << endl;
		cout << "Периметр = " << example.side[0] + example.side[1] + example.side[2] << endl;
		cout << endl;

		/*
		Задание №4
		Создать массив из 20 элеметнов типа Point.
		Проинициализировать его точками со случайными значениями координат в пределах от 0 до 100.
		Выведите на экран координаты:
		- точки с наименьшей x координатой
		- двух точек, расстояние между которыми минимально.
		*/
		Point mas[20];
		int moon = 101, a = 101, b = 101;
		Point minimal1, minimal2;
		Point min;
		for (int i = 0; i < 20; ++i)
		{
			mas[i].x = GetRandomValue(0, 100);
			mas[i].y = GetRandomValue(0, 100);
			if (masas[i].x < moon)
			{
				moon = mas[i].x;
				min.x = mas[i].x;
				min.y = mas[i].y;
			}
					
		}
		for (int i = 0; i < 20; ++i)
		{
			for (int j = 0; j < 20; ++j)
			{
				if (abs(mas[i].x - mas[j].x) < a && mas[i].x != mas[j].x &&
					abs(mas[i].y - mas[j].y) < b&& mas[i].y != mas[j].y)
				{
					a = abs(mas[i].x - mas[j].x);
					minimal1.x = mas[i].x;
					minimal2.x = mas[j].x;
					b = abs(mas[i].y - mas[j].y);
					minimal1.y = mas[i].y;
					minimal2.y = mas[j].y;
				}
			}
		}
		cout << "Наименьший x у точки: " << min.x << "|" << min.y  << endl;
		cout << "Ближе всех точки: " << minimal1.x << "|" << minimal1.y << "  "<< minimal2.x << "|" << minimal2.y << endl;
cout << endl;
/*
	Задание №6
	Написать программу, которая проверяет правильность заданных значений даты.
	Дату хранить с использованием структуры.
	Тестовые данные				Ожидаемый результат
	1 1 1992					Дата корректна
	30 6 1992					Дата корректна
	31 7 1992					Дата коррентна
	31 9 1994					Дата некорректна
	32 1 1992					Дана некорректна
	1 13 1992					Дата некорректна
	29 2 1993					Дата некорректна
	29 2 2004					Дата корректна
	29 2 1900					Дата некоррентна
	29 2 2000					Дата корректна
	*/
	bool proveka;
	cout << " Введите данные в формате день, месяц, год" << endl;
	date data;
	cin >> data.day;
	cin >> data.month;
	cin >> data.year;
	if (data.day < 32 && data.month < 13)
	{
		switch (data.month)
		{
		case 1:
		case 3:
		case 5:
		case 7:
		case 8:
		case 10:
		case 12:
			if (data.day <= 31)
			{
			proveka = true;
			}
			else
			{
				proveka = false;
			}
			break;
		case 2:
			if ((data.year % 4 == 0 && (data.year % 100 != 0) || (data.year % 400 == 0))
				&& (data.day <= 29))
			{
				proveka = true;
			}
			else if (((data.year % 4 != 0 && (data.year % 100 == 0)) || (data.year % 400 != 0))
				&& (data.day <= 28))
			{
				proveka = true;
			}
			else
			{
				proveka = false;
			}
			break;
		case 4:
		case 6:
		case 9:
		case 11:
			if (data.day <= 30)
			{
				proveka = true;
			}
			else
			{
				proveka = false;
			}
		default:
			break;
		}
	}
	else
	{
		proveka = false;
	}
	cout << "Data - " << proveka << endl;
}
